{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Cloud Operation Document Repository","title":"Home"},{"location":"#welcome-to-cloud-operation-document-repository","text":"","title":"Welcome to Cloud Operation Document Repository"},{"location":"Best-README/","text":"How to Write a Perfect ReadMe Open Source The clarity of readme files is critical for software developers. That information varies from installation instructions to potential bugs and depends on the nature of the software. Fortunately, there is a set of good practices to follow if you want your ReadMe to be neat. The goal is clear communications While there are no hard and fast rules, every ReadMe file needs to be easily understood and contain accurate information that helps users get the most out of your software. Following the eight guidelines listed below, you can help developers leverage the software\u2019s benefits and head off potential problems down the road. 1. Summarize what your software does in the introductory paragraph All good writing, including technical writing, begins with a clear summary of what you\u2019re writing about. Begin with an introductory paragraph that tells readers the purpose of your software and its major benefits. Give them a summary of the information you will include in your ReadMe using clearly defined sections. 2. Organize your information to make it easily accessible While every ReadMe is different, most should include sections like general information, getting started, included technologies, setup, tests and any bugs or problems. If you mention libraries, provide links to these. Your ReadMe file should include such elements as tech description (language/framework used with version), database, patterns and setup. 3. Provide key facts in your general information section The general information section should expand on the summary you provided in your introductory paragraph to give readers a better understanding of your project. Include a brief description and answer the question, \"what problem does this project solve?\" Include an outline of the technologies in the project, such as framework (Rails/iOS/Android/Gameboy Colour), as well as programming language, database, ORM, links to any related projects (for example, whether this a Rails API with corresponding iOS and Android clients), links to online tools related to the application (such as the Basecamp project, the dropbox where all the wireframes are stored and the JIRA project). 4. Show users how to get started In your getting started section, include a detailed spin-up process with instructions for installing any software the application is dependent on (such as wkhtmlopdf, PostgreSQL, XQuartz). Give instructions on running the app. Finally, include information about subdomains in the app (e.g., api.myapp.dev/), other tools configuration (e.g. Stripe, Amazon), and test data info. This way you will let the developer start working with on your project faster. 5. Explain testing procedures Give users explicit instructions on how to run all necessary tests. Explain the libraries, such as Capybara or Cucumber, used for testing your software and supply all necessary commands. 6. Describe common problems and bugs This point requires open source mostly. Be aware of any problems with your software and describe them to your users. The bugs/issues included in the ReadMe should always be specific and include solutions. Be sure to add information about solutions to the bugs you know. 7. Explain and provide access to staging/beta environments Users will need access to all included staging environments to fully understand how to navigate them. Provide instructions for connecting to servers and tell clients how to obtain necessary permissions. 8. Remember about ReadMe updates It\u2019s important to stay one step ahead of the problems by regularly updating and maintaining your ReadMe file. When you add new tools, be sure to proactively test each before you incorporate them into your file. You should update the ReadMe file anytime you implement changes within the setup, configuration or technologies used. Conclusion A ReadMe file is often a developer\u2019s first introduction to your project. If it\u2019s clear and gives them relevant information they need, you\u2019ll make other developers\u2019 lives much easier, let them save time while introducing to the project and\u2026 keep calm by avoiding unnecessary frustrations. To be effective, your ReadMe should both engage your clients and be fun to use in open source projects.","title":"Best README"},{"location":"Best-README/#how-to-write-a-perfect-readme","text":"Open Source The clarity of readme files is critical for software developers. That information varies from installation instructions to potential bugs and depends on the nature of the software. Fortunately, there is a set of good practices to follow if you want your ReadMe to be neat. The goal is clear communications While there are no hard and fast rules, every ReadMe file needs to be easily understood and contain accurate information that helps users get the most out of your software. Following the eight guidelines listed below, you can help developers leverage the software\u2019s benefits and head off potential problems down the road.","title":"How to Write a Perfect ReadMe"},{"location":"Best-README/#1-summarize-what-your-software-does-in-the-introductory-paragraph","text":"All good writing, including technical writing, begins with a clear summary of what you\u2019re writing about. Begin with an introductory paragraph that tells readers the purpose of your software and its major benefits. Give them a summary of the information you will include in your ReadMe using clearly defined sections.","title":"1. Summarize what your software does in the introductory paragraph"},{"location":"Best-README/#2-organize-your-information-to-make-it-easily-accessible","text":"While every ReadMe is different, most should include sections like general information, getting started, included technologies, setup, tests and any bugs or problems. If you mention libraries, provide links to these. Your ReadMe file should include such elements as tech description (language/framework used with version), database, patterns and setup.","title":"2. Organize your information to make it easily accessible"},{"location":"Best-README/#3-provide-key-facts-in-your-general-information-section","text":"The general information section should expand on the summary you provided in your introductory paragraph to give readers a better understanding of your project. Include a brief description and answer the question, \"what problem does this project solve?\" Include an outline of the technologies in the project, such as framework (Rails/iOS/Android/Gameboy Colour), as well as programming language, database, ORM, links to any related projects (for example, whether this a Rails API with corresponding iOS and Android clients), links to online tools related to the application (such as the Basecamp project, the dropbox where all the wireframes are stored and the JIRA project).","title":"3. Provide key facts in your general information section"},{"location":"Best-README/#4-show-users-how-to-get-started","text":"In your getting started section, include a detailed spin-up process with instructions for installing any software the application is dependent on (such as wkhtmlopdf, PostgreSQL, XQuartz). Give instructions on running the app. Finally, include information about subdomains in the app (e.g., api.myapp.dev/), other tools configuration (e.g. Stripe, Amazon), and test data info. This way you will let the developer start working with on your project faster.","title":"4. Show users how to get started"},{"location":"Best-README/#5-explain-testing-procedures","text":"Give users explicit instructions on how to run all necessary tests. Explain the libraries, such as Capybara or Cucumber, used for testing your software and supply all necessary commands.","title":"5. Explain testing procedures"},{"location":"Best-README/#6-describe-common-problems-and-bugs","text":"This point requires open source mostly. Be aware of any problems with your software and describe them to your users. The bugs/issues included in the ReadMe should always be specific and include solutions. Be sure to add information about solutions to the bugs you know.","title":"6. Describe common problems and bugs"},{"location":"Best-README/#7-explain-and-provide-access-to-stagingbeta-environments","text":"Users will need access to all included staging environments to fully understand how to navigate them. Provide instructions for connecting to servers and tell clients how to obtain necessary permissions.","title":"7. Explain and provide access to staging/beta environments"},{"location":"Best-README/#8-remember-about-readme-updates","text":"It\u2019s important to stay one step ahead of the problems by regularly updating and maintaining your ReadMe file. When you add new tools, be sure to proactively test each before you incorporate them into your file. You should update the ReadMe file anytime you implement changes within the setup, configuration or technologies used.","title":"8. Remember about ReadMe updates"},{"location":"Best-README/#conclusion","text":"A ReadMe file is often a developer\u2019s first introduction to your project. If it\u2019s clear and gives them relevant information they need, you\u2019ll make other developers\u2019 lives much easier, let them save time while introducing to the project and\u2026 keep calm by avoiding unnecessary frustrations. To be effective, your ReadMe should both engage your clients and be fun to use in open source projects.","title":"Conclusion"},{"location":"Sample-README/","text":"Foobar Foobar is a Python library for dealing with word pluralization. Installation Requirements Linux Python 3.3 and up $ pip install foobar Usage import foobar foobar.pluralize('word') # returns 'words' foobar.pluralize('goose') # returns 'geese' foobar.singularize('phenomena') # returns 'phenomenon' Development $ virtualenv foobar $ . foobar/bin/activate $ pip install -e . Contributing Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. License MIT","title":"Sample README"},{"location":"Sample-README/#foobar","text":"Foobar is a Python library for dealing with word pluralization.","title":"Foobar"},{"location":"Sample-README/#installation","text":"","title":"Installation"},{"location":"Sample-README/#requirements","text":"Linux Python 3.3 and up $ pip install foobar","title":"Requirements"},{"location":"Sample-README/#usage","text":"import foobar foobar.pluralize('word') # returns 'words' foobar.pluralize('goose') # returns 'geese' foobar.singularize('phenomena') # returns 'phenomenon'","title":"Usage"},{"location":"Sample-README/#development","text":"$ virtualenv foobar $ . foobar/bin/activate $ pip install -e .","title":"Development"},{"location":"Sample-README/#contributing","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.","title":"Contributing"},{"location":"Sample-README/#license","text":"MIT","title":"License"},{"location":"markdown-primer/","text":"Markdown Cheatsheet Heading 1 Markup : # Heading 1 # -OR- Markup : ============= (below H1 text) Heading 2 Markup : ## Heading 2 ## -OR- Markup: --------------- (below H2 text) Heading 3 Markup : ### Heading 3 ### Heading 4 Markup : #### Heading 4 #### Common text Markup : Common text Emphasized text Markup : _Emphasized text_ or *Emphasized text* ~~Strikethrough text~~ Markup : ~~Strikethrough text~~ Strong text Markup : __Strong text__ or **Strong text** Strong emphasized text Markup : ___Strong emphasized text___ or ***Strong emphasized text*** Named Link and http://www.google.fr/ or http://example.com/ Markup : [Named Link](http://www.google.fr/) and http://www.google.fr/ or http://example.com/ Table, like this one : First Header Second Header Content Cell Content Cell Content Cell Content Cell First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell code() Markup : `code()` var specificLanguage_code = { data : { lookedUpPlatform : 1, query : Kasabian+Test+Transmission , lookedUpItem : { name : Test Transmission , artist : Kasabian , album : Kasabian , picture : null, link : http://open.spotify.com/track/5jhJur5n4fasblLSCOcrTp } } } Markup : ```javascript ``` Bullet list Nested bullet Sub-nested bullet etc Bullet list item 2 Markup : * Bullet list * Nested bullet * Sub-nested bullet etc * Bullet list item 2 A numbered list A nested numbered list Which is numbered Which is numbered Markup : 1. A numbered list 1. A nested numbered list 2. Which is numbered 2. Which is numbered [ ] An uncompleted task [x] A completed task Markup : - [ ] An uncompleted task - [x] A completed task Blockquote Nested blockquote Markup : Blockquote Nested Blockquote Horizontal line : Markup : - - - - Image with alt : Markup : ![picture alt](http://www.brightlightpictures.com/assets/images/portfolio/thethaw_header.jpg \"Title is optional\") Foldable text: Title 1 Content 1 Content 1 Content 1 Content 1 Content 1 Title 2 Content 2 Content 2 Content 2 Content 2 Content 2 Markup : details summary Title 1 /summary p Content 1 Content 1 Content 1 Content 1 Content 1 /p /details h3 HTML /h3 p Some HTML code here /p Hotkey: \u2318F \u21e7\u2318F Markup : kbd \u2318F /kbd Hotkey list: Key Symbol Option \u2325 Control \u2303 Command \u2318 Shift \u21e7 Caps Lock \u21ea Tab \u21e5 Esc \u238b Power \u233d Return \u21a9 Delete \u232b Up \u2191 Down \u2193 Left \u2190 Right \u2192 Emoji: :exclamation: Use emoji icons to enhance text. :+1: Look up emoji codes at emoji-cheat-sheet.com Markup : Code appears between colons :EMOJICODE:","title":"Markdown Primer"},{"location":"markdown-primer/#markdown-cheatsheet","text":"","title":"Markdown Cheatsheet"},{"location":"markdown-primer/#heading-1","text":"Markup : # Heading 1 # -OR- Markup : ============= (below H1 text)","title":"Heading 1"},{"location":"markdown-primer/#heading-2","text":"Markup : ## Heading 2 ## -OR- Markup: --------------- (below H2 text)","title":"Heading 2"},{"location":"markdown-primer/#heading-3","text":"Markup : ### Heading 3 ###","title":"Heading 3"},{"location":"markdown-primer/#heading-4","text":"Markup : #### Heading 4 #### Common text Markup : Common text Emphasized text Markup : _Emphasized text_ or *Emphasized text* ~~Strikethrough text~~ Markup : ~~Strikethrough text~~ Strong text Markup : __Strong text__ or **Strong text** Strong emphasized text Markup : ___Strong emphasized text___ or ***Strong emphasized text*** Named Link and http://www.google.fr/ or http://example.com/ Markup : [Named Link](http://www.google.fr/) and http://www.google.fr/ or http://example.com/ Table, like this one : First Header Second Header Content Cell Content Cell Content Cell Content Cell First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell code() Markup : `code()` var specificLanguage_code = { data : { lookedUpPlatform : 1, query : Kasabian+Test+Transmission , lookedUpItem : { name : Test Transmission , artist : Kasabian , album : Kasabian , picture : null, link : http://open.spotify.com/track/5jhJur5n4fasblLSCOcrTp } } } Markup : ```javascript ``` Bullet list Nested bullet Sub-nested bullet etc Bullet list item 2 Markup : * Bullet list * Nested bullet * Sub-nested bullet etc * Bullet list item 2 A numbered list A nested numbered list Which is numbered Which is numbered Markup : 1. A numbered list 1. A nested numbered list 2. Which is numbered 2. Which is numbered [ ] An uncompleted task [x] A completed task Markup : - [ ] An uncompleted task - [x] A completed task Blockquote Nested blockquote Markup : Blockquote Nested Blockquote Horizontal line : Markup : - - - - Image with alt : Markup : ![picture alt](http://www.brightlightpictures.com/assets/images/portfolio/thethaw_header.jpg \"Title is optional\") Foldable text: Title 1 Content 1 Content 1 Content 1 Content 1 Content 1 Title 2 Content 2 Content 2 Content 2 Content 2 Content 2 Markup : details summary Title 1 /summary p Content 1 Content 1 Content 1 Content 1 Content 1 /p /details h3 HTML /h3 p Some HTML code here /p Hotkey: \u2318F \u21e7\u2318F Markup : kbd \u2318F /kbd Hotkey list: Key Symbol Option \u2325 Control \u2303 Command \u2318 Shift \u21e7 Caps Lock \u21ea Tab \u21e5 Esc \u238b Power \u233d Return \u21a9 Delete \u232b Up \u2191 Down \u2193 Left \u2190 Right \u2192 Emoji: :exclamation: Use emoji icons to enhance text. :+1: Look up emoji codes at emoji-cheat-sheet.com Markup : Code appears between colons :EMOJICODE:","title":"Heading 4"}]}